From Pavel Begunkov asml.silence@gmail.com
To netdev@vger.kernel.org, David S . Miller davem@davemloft.net,
	Jakub Kicinski kuba@kernel.org
Cc Hideaki YOSHIFUJI yoshfuji@linux-ipv6.org,
	David Ahern dsahern@kernel.org,
	Eric Dumazet edumazet@google.com,
	Willem de Bruijn willemdebruijn.kernel@gmail.com,
	linux-kernel@vger.kernel.org,
	Pavel Begunkov asml.silence@gmail.com
Subject [PATCH 0714] ipv6 pass flow in ip6_make_skb together with cork
Date Tue, 11 Jan 2022 012139 +0000	[thread overview]
Message-ID eae1be625797e0323e3e1e82b44cc0d716e2fcc9.1641863490.git.asml.silence@gmail.com (raw)
In-Reply-To cover.1641863490.git.asml.silence@gmail.com

Another preparation patch. inet_cork_full already contains a field for
iflow, so we can avoid passing a separate struct iflow6 into
__ip6_append_data() and ip6_make_skb(), and use the flow stored in
inet_cork_full. Make sure callers set cork-fl right, i.e. we init it in
ip6_append_data() and right before the only ip6_make_skb() call.

Signed-off-by Pavel Begunkov asml.silence@gmail.com
---
 includenetipv6.h      2 +-
 netipv6ip6_output.c  20 +++++++++-----------
 netipv6udp.c          4 +++-
 3 files changed, 13 insertions(+), 13 deletions(-)

diff --git aincludenetipv6.h bincludenetipv6.h
index 3afcb128e064..5e0b56d66724 100644
--- aincludenetipv6.h
+++ bincludenetipv6.h
@@ -1020,7 +1020,7 @@ struct sk_buff ip6_make_skb(struct sock sk,
 			     int getfrag(void from, char to, int offset,
 					 int len, int odd, struct sk_buff skb),
 			     void from, int length, int transhdrlen,
-			     struct ipcm6_cookie ipc6, struct flowi6 fl6,
+			     struct ipcm6_cookie ipc6,
 			     struct rt6_info rt, unsigned int flags,
 			     struct inet_cork_full cork);
 
diff --git anetipv6ip6_output.c bnetipv6ip6_output.c
index 62da09819750..0cc490f2cfbf 100644
--- anetipv6ip6_output.c
+++ bnetipv6ip6_output.c
@@ -1350,7 +1350,7 @@ static void ip6_append_data_mtu(unsigned int mtu,
 
 static int ip6_setup_cork(struct sock sk, struct inet_cork_full cork,
 			  struct inet6_cork v6_cork, struct ipcm6_cookie ipc6,
-			  struct rt6_info rt, struct flowi6 fl6)
+			  struct rt6_info rt)
 {
 	struct ipv6_pinfo np = inet6_sk(sk);
 	unsigned int mtu;
@@ -1391,7 +1391,6 @@ static int ip6_setup_cork(struct sock sk, struct inet_cork_full cork,
 	}
 	dst_hold(&rt-dst);
 	cork-base.dst = &rt-dst;
-	cork-fl.u.ip6 = fl6;
 	v6_cork-hop_limit = ipc6-hlimit;
 	v6_cork-tclass = ipc6-tclass;
 	if (rt-dst.flags & DST_XFRM_TUNNEL)
@@ -1422,7 +1421,6 @@ static int ip6_setup_cork(struct sock sk, struct inet_cork_full cork,
 }
 
 static int __ip6_append_data(struct sock sk,
-			     struct flowi6 fl6,
 			     struct sk_buff_head queue,
 			     struct inet_cork_full cork_full,
 			     struct inet6_cork v6_cork,
@@ -1434,6 +1432,7 @@ static int __ip6_append_data(struct sock sk,
 {
 	struct sk_buff skb, skb_prev = NULL;
 	struct inet_cork cork = &cork_full-base;
+	struct flowi6 fl6 = &cork_full-fl.u.ip6;
 	unsigned int maxfraglen, fragheaderlen, mtu, orig_mtu, pmtu;
 	struct ubuf_info uarg = NULL;
 	int exthdrlen = 0;
@@ -1786,19 +1785,19 @@ int ip6_append_data(struct sock sk,
 		  setup for corking
 		 
 		err = ip6_setup_cork(sk, &inet-cork, &np-cork,
-				     ipc6, rt, fl6);
+				     ipc6, rt);
 		if (err)
 			return err;
 
+		inet-cork.fl.u.ip6 = fl6;
 		exthdrlen = (ipc6-opt  ipc6-opt-opt_flen  0);
 		length += exthdrlen;
 		transhdrlen += exthdrlen;
 	} else {
-		fl6 = &inet-cork.fl.u.ip6;
 		transhdrlen = 0;
 	}
 
-	return __ip6_append_data(sk, fl6, &sk-sk_write_queue, &inet-cork,
+	return __ip6_append_data(sk, &sk-sk_write_queue, &inet-cork,
 				 &np-cork, sk_page_frag(sk), getfrag,
 				 from, length, transhdrlen, flags, ipc6);
 }
@@ -1967,9 +1966,8 @@ struct sk_buff ip6_make_skb(struct sock sk,
 			     int getfrag(void from, char to, int offset,
 					 int len, int odd, struct sk_buff skb),
 			     void from, int length, int transhdrlen,
-			     struct ipcm6_cookie ipc6, struct flowi6 fl6,
-			     struct rt6_info rt, unsigned int flags,
-			     struct inet_cork_full cork)
+			     struct ipcm6_cookie ipc6, struct rt6_info rt,
+			     unsigned int flags, struct inet_cork_full cork)
 {
 	struct inet6_cork v6_cork;
 	struct sk_buff_head queue;
@@ -1986,7 +1984,7 @@ struct sk_buff ip6_make_skb(struct sock sk,
 	cork-base.opt = NULL;
 	cork-base.dst = NULL;
 	v6_cork.opt = NULL;
-	err = ip6_setup_cork(sk, cork, &v6_cork, ipc6, rt, fl6);
+	err = ip6_setup_cork(sk, cork, &v6_cork, ipc6, rt);
 	if (err) {
 		ip6_cork_release(cork, &v6_cork);
 		return ERR_PTR(err);
@@ -1994,7 +1992,7 @@ struct sk_buff ip6_make_skb(struct sock sk,
 	if (ipc6-dontfrag  0)
 		ipc6-dontfrag = inet6_sk(sk)-dontfrag;
 
-	err = __ip6_append_data(sk, fl6, &queue, cork, &v6_cork,
+	err = __ip6_append_data(sk, &queue, cork, &v6_cork,
 				&current-task_frag, getfrag, from,
 				length + exthdrlen, transhdrlen + exthdrlen,
 				flags, ipc6);
diff --git anetipv6udp.c bnetipv6udp.c
index 9a91b51d8e3f..2580705431ea 100644
--- anetipv6udp.c
+++ bnetipv6udp.c
@@ -1533,9 +1533,11 @@ int udpv6_sendmsg(struct sock sk, struct msghdr msg, size_t len)
 		struct inet_cork_full cork;
 		struct sk_buff skb;
 
+		cork.fl.u.ip6 = fl6;
+
 		skb = ip6_make_skb(sk, getfrag, msg, ulen,
 				   sizeof(struct udphdr), &ipc6,
-				   &fl6, (struct rt6_info )dst,
+				   (struct rt6_info )dst,
 				   msg-msg_flags, &cork);
 		err = PTR_ERR(skb);
 		if (!IS_ERR_OR_NULL(skb))
-- 
2.34.1